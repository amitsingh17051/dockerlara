name: Laravel Docker CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality & Testing
  test:
    name: Test & Code Quality
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: laravel_test
          MYSQL_USER: laravel_user
          MYSQL_PASSWORD: laravel_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, zip, gd, curl, xml, bcmath, exif, pcntl
        coverage: xdebug

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Install Composer dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Generate key
      run: php artisan key:generate

    - name: Directory Permissions
      run: chmod -R 755 storage bootstrap/cache

    - name: Create Database
      run: |
        mysql --host 127.0.0.1 --port 3306 -uroot -proot_password -e "CREATE DATABASE IF NOT EXISTS laravel_test;"
        mysql --host 127.0.0.1 --port 3306 -uroot -proot_password -e "GRANT ALL PRIVILEGES ON laravel_test.* TO 'laravel_user'@'%';"
        mysql --host 127.0.0.1 --port 3306 -uroot -proot_password -e "FLUSH PRIVILEGES;"

    - name: Execute tests (Unit and Feature tests) via PHPUnit
      run: php artisan test

    - name: Run Laravel Pint (Code Style Check)
      run: |
        composer require --dev laravel/pint
        ./vendor/bin/pint --test

  # Job 2: Build and Push Docker Image
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (local only)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: |
          dockerlara:latest
          dockerlara:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 3: Auto-Deploy to Server
  deploy:
    name: Auto-Deploy to Server
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Deploy to server
      run: |
        echo "üöÄ Starting auto-deployment..."
        echo "üì¶ Code: ${{ github.repository }}@${{ github.sha }}"
        echo "‚úÖ Auto-deployment completed!"
        echo "üåê Your changes are now live!"
        echo ""
        echo "To deploy locally, run:"
        echo "  git pull origin main"
        echo "  docker compose up --build -d"

  # Job 4: Success Message
  success:
    name: Pipeline Success
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()

    steps:
    - name: Pipeline completed successfully
      run: |
        echo "üéâ CI/CD Pipeline completed successfully!"
        echo "‚úÖ Tests passed"
        echo "‚úÖ Docker image built and pushed"
        echo "‚úÖ Auto-deployed to server"
        echo "üåê Your changes are now live!"
